# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_train.ipynb.

# %% auto 0
__all__ = ['d_model', 'd_ff', 'batch_size', 'context_length', 'max_iters', 'eval_interval', 'eval_iters', 'learning_rate',
           'n_embd', 'n_head', 'n_layer', 'dropout', 'device', 'chars', 'vocab_size', 'stoi', 'itos', 'encode',
           'decode', 'data', 'n', 'train_data', 'val_data', 'model', 'get_batch', 'estimate_loss']

# %% ../nbs/01_train.ipynb 4
import torch
from torch import optim
from .model import GPT2

# %% ../nbs/01_train.ipynb 5
d_model = 512
d_ff = 2048

batch_size = 2
context_length = 256

max_iters = 2
eval_interval = 500
eval_iters = 200
learning_rate = 3e-4

n_embd = 384
n_head = 6
n_layer = 6
dropout = 0.2

device = "cuda" if torch.cuda.is_available() else "cpu"

# %% ../nbs/01_train.ipynb 6
with open('../data/shakespeare.txt', 'r', encoding='utf8') as f:
    text = f.read()

# here are all the unique characters that occur in this text
chars = sorted(list(set(text)))
vocab_size = len(chars)
# create a mapping from characters to integers
stoi = { ch:i for i,ch in enumerate(chars) }
itos = { i:ch for i,ch in enumerate(chars) }
encode = lambda s: [stoi[c] for c in s] # encoder: take a string, output a list of integers
decode = lambda l: ''.join([itos[i] for i in l]) # decoder: take a list of integers, output a string

# Train and test splits
data = torch.tensor(encode(text), dtype=torch.long)
n = int(0.9*len(data)) # first 90% will be train, rest val
train_data = data[:n]
val_data = data[n:]

# %% ../nbs/01_train.ipynb 7
model = GPT2(
    n_head=n_head, n_layer=3, vocab_size=vocab_size,
    n_embd=n_embd, context_length=context_length,
).to(device)

# %% ../nbs/01_train.ipynb 8
sum(p.numel() for p in model.parameters())

# %% ../nbs/01_train.ipynb 10
# data loading
def get_batch(split, context_length: int):
    # generate a small batch of data of inputs x and targets y
    data = train_data if split == 'train' else val_data
    ix = torch.randint(len(data) - context_length, (batch_size,))
    x = torch.stack([data[i:i+context_length] for i in ix])
    y = torch.stack([data[i+1:i+context_length+1] for i in ix])
    x, y = x.to(device), y.to(device)
    return x, y

# %% ../nbs/01_train.ipynb 11
@torch.no_grad()
def estimate_loss(model, eval_iters: int, context_length: int):
    out = {}
    model.eval()
    for split in ["train", "val"]:
        losses = torch.zeros(eval_iters)
        for k in range(eval_iters):
            X, Y = get_batch(split, context_length)
            logits, loss = model(X, Y)
            losses[k] = loss.item()
        
        out[split] = losses.mean()
    
    model.train()
    return out
